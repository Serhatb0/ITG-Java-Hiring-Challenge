package com.biricik.automotive.business.concretes;


import java.math.BigDecimal;
import java.util.List;

import org.springframework.stereotype.Service;

import com.biricik.automotive.business.abstracts.CouponService;
import com.biricik.automotive.business.abstracts.CustomerService;
import com.biricik.automotive.business.abstracts.ProductService;
import com.biricik.automotive.business.abstracts.ShoppingCartItemService;
import com.biricik.automotive.business.abstracts.ShoppingCartService;
import com.biricik.automotive.business.requests.couponRequest.CouponApplyRequest;
import com.biricik.automotive.business.requests.shoppingCartRequest.CreateShoppingCartRequest;
import com.biricik.automotive.business.responses.couponResponses.CouponApplyResponse;
import com.biricik.automotive.business.responses.shoppingCartResponses.CreateShoppingCartResponse;
import com.biricik.automotive.business.responses.shoppingCartResponses.FindByCustomerIdShoppingCartResponse;
import com.biricik.automotive.business.rules.CouponRules;
import com.biricik.automotive.model.Coupon;
import com.biricik.automotive.model.Customer;
import com.biricik.automotive.model.Product;
import com.biricik.automotive.model.ShoppingCart;
import com.biricik.automotive.model.ShoppingCartItem;
import com.biricik.automotive.repository.ShoppingCartRepository;


@Service
public class ShoppingCartManager implements ShoppingCartService {

	private final ShoppingCartRepository shoppingCartRepository;
	private final ShoppingCartMapper shoppingCartMapper;
	private final ShoppingCartItemService shoppingCartItemService;
	private final ProductService productService;
	private final ProductMapper productMapper;
	private final CustomerService customerService;
	private final CouponService couponService;
	private final CouponRules couponRules;

	public ShoppingCartManager(ShoppingCartRepository shoppingCartRepository, ShoppingCartMapper shoppingCartMapper,
			ShoppingCartItemService shoppingCartItemService, ProductService productService, ProductMapper productMapper,
			CustomerService customerService, CouponService couponService, CouponRules couponRules) {
		this.shoppingCartRepository = shoppingCartRepository;
		this.shoppingCartMapper = shoppingCartMapper;
		this.shoppingCartItemService = shoppingCartItemService;
		this.productService = productService;
		this.productMapper = productMapper;
		this.customerService = customerService;
		this.couponService = couponService;
		this.couponRules = couponRules;

	}

	@Override
	public CreateShoppingCartResponse addShoppingCart(CreateShoppingCartRequest createShoppingCartRequest) {

		Product product = productMapper
				.findByIdProductResponseToProduct(productService.findById(createShoppingCartRequest.getProductId()));

		Customer customer = this.customerService.findById(createShoppingCartRequest.getCustomerId());

		List<ShoppingCartItem> shoppingCartItems = this.shoppingCartItemService
				.findByCustomerId(createShoppingCartRequest.getCustomerId());

		ShoppingCart shoppingCart = this.shoppingCartRepository
				.findByCustomerId(createShoppingCartRequest.getCustomerId())
				.orElse(this.shoppingCartMapper.toShoppingCart(customer, shoppingCartItems, BigDecimal.ZERO));

		this.shoppingCartRepository.save(shoppingCart);

		if (indexOfProduct(shoppingCartItems, product) == -1) {

			ShoppingCartItem shoppingCartItem = shoppingCartMapper.toShoppingCartItem(product,
					createShoppingCartRequest, shoppingCart);

			shoppingCartItems.add(shoppingCartItem);
			shoppingCartItemService.addShoppingCartItemService(shoppingCartItem);

		} else {

			ShoppingCartItem shoppingCartItem = shoppingCartItems.get(indexOfProduct(shoppingCartItems, product));
			shoppingCartItem.setQuantity(shoppingCartItem.getQuantity() + createShoppingCartRequest.getQuantity());
			shoppingCartItemService.addShoppingCartItemService(shoppingCartItem);
		}

		shoppingCart.setTotalAmount(calculateTotalAndDiscountedAmount(shoppingCart, null)[0]);
		shoppingCart.setDiscountedTotalAmount(calculateTotalAndDiscountedAmount(shoppingCart, null)[1]);

		this.shoppingCartRepository.save(shoppingCart);
		return shoppingCartMapper.shoppingCartToCreateShoppingCartResponse(shoppingCart);

	}

	public CouponApplyResponse applyCouponForShoppingCart(CouponApplyRequest couponApplyRequest) {

		ShoppingCart shoppingCart = shoppingCartRepository.findByCustomerId(couponApplyRequest.getCustomerId()).get();

		shoppingCart.setDiscountedTotalAmount(
				calculateTotalAndDiscountedAmount(shoppingCart, couponApplyRequest.getDiscountCode())[1]);

		shoppingCart.setTotalAmount(
				calculateTotalAndDiscountedAmount(shoppingCart, couponApplyRequest.getDiscountCode())[0]);

		return shoppingCartMapper.shoppingCartToCouponApplyResponse(shoppingCart);
	}

	@Override
	public FindByCustomerIdShoppingCartResponse findByCustomerId(int customerId) {

		ShoppingCart shoppingCart = shoppingCartRepository.findByCustomerId(customerId).orElse(new ShoppingCart());

		return shoppingCartMapper.shoppingCartItemToFindByCustomerIdShoppingCartResponse(shoppingCart);

	}

	@Override
	public void updatedShoppingCart(int customerId, ShoppingCartItem shoppingCartItem) {

		ShoppingCart shoppingCart = this.shoppingCartRepository.findByCustomerId(customerId).get();

		shoppingCart.setTotalAmount(shoppingCart.getTotalAmount().subtract(
				shoppingCartItem.getProduct().getPrice().multiply(BigDecimal.valueOf(shoppingCartItem.getQuantity()))));
		shoppingCart.setDiscountedTotalAmount(shoppingCart.getDiscountedTotalAmount().subtract(
				shoppingCartItem.getProduct().getPrice().multiply(BigDecimal.valueOf(shoppingCartItem.getQuantity()))));

		this.shoppingCartRepository.save(shoppingCart);

	}
	
	@Override
	public void updatedShoppingCart(ShoppingCart shoppingCart) {

		
		shoppingCart.setTotalAmount(new BigDecimal(0));
		shoppingCart.setDiscountedTotalAmount(new BigDecimal(0));

		this.shoppingCartRepository.save(shoppingCart);

	}

	private int indexOfProduct(List<ShoppingCartItem> shoppingCartItems, Product product) {
		for (int i = 0; i < shoppingCartItems.size(); i++) {
			if (shoppingCartItems.get(i).getProduct().equals(product)) {
				return i;
			}
		}
		return -1;
	}

	private BigDecimal[] calculateTotalAndDiscountedAmount(ShoppingCart shoppingCart, String discountCode) {
		BigDecimal totalAmount = BigDecimal.ZERO;

		BigDecimal discountedAmount = BigDecimal.ZERO;
		for (ShoppingCartItem cartItem : shoppingCart.getShoppingCartItems()) {
			totalAmount = totalAmount
					.add(cartItem.getProduct().getPrice().multiply(BigDecimal.valueOf(cartItem.getQuantity())));

		}

		if (discountCode != null) {
			BigDecimal discountRate = findByDiscountRate(discountCode);
			discountedAmount = totalAmount.subtract(totalAmount.multiply(discountRate).divide(BigDecimal.valueOf(100)));
		} else {
			discountedAmount = totalAmount;
		}

		return new BigDecimal[] { totalAmount, discountedAmount };

	}

	private BigDecimal findByDiscountRate(String code) {

		BigDecimal discountRate;

		Coupon coupon = this.couponService.findByCode(code);

		couponRules.checkCouponDateExpiry(coupon);
		couponRules.checkCouponValidity(code);

		if (coupon.getDiscount() == null) {
			discountRate = BigDecimal.ZERO;
		} else {
			discountRate = coupon.getDiscount();
		}
		return discountRate;

	}

	@Override
	public ShoppingCart findById(int id) {

		return shoppingCartRepository.findById(id).get();
	}

}
