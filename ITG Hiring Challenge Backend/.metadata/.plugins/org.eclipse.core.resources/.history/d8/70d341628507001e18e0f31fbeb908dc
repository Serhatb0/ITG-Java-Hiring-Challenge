package com.biricik.automotive.controllers;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.biricik.automotive.business.abstracts.AuthService;
import com.biricik.automotive.business.abstracts.EmailService;
import com.biricik.automotive.business.requests.authRequest.LoginRequest;
import com.biricik.automotive.business.requests.authRequest.RefreshTokenRequest;
import com.biricik.automotive.business.requests.authRequest.RegisterRequest;
import com.biricik.automotive.business.responses.authResponses.GetAllLockedAccountsResponse;
import com.biricik.automotive.business.responses.authResponses.LoginResponse;
import com.biricik.automotive.business.responses.authResponses.RefreshTokenResponse;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/v1/auth")

public class AuthController {

	private final AuthService authService;

	private final EmailService emailService;

	@Value("${app.email_verifed_callbackurl}")
	private String emailVerifedCallbackUrl;

	@Autowired
	public AuthController(AuthService authService, EmailService emailService) {
		this.authService = authService;

		this.emailService = emailService;

	}

	@PostMapping("/login")
	public LoginResponse login(@Valid @RequestBody LoginRequest loginRequest) {
		return authService.login(loginRequest);
	}

	@PostMapping("/register")
	public String register(@Valid @RequestBody RegisterRequest registerRequest) {
		return authService.registerUser(registerRequest);
	}

	@RequestMapping(value = "/confirm-account", method = { RequestMethod.GET, RequestMethod.POST })
	public ResponseEntity<String> confirmUserAccount(@RequestParam("token") String confirmationToken) {
		emailService.confirmEmail(confirmationToken);

		return ResponseEntity.status(HttpStatus.TEMPORARY_REDIRECT)
				.location(URI.create(emailVerifedCallbackUrl + "/auth/login")).build();

	}

	@PreAuthorize("hasRole('ADMIN')")
	@GetMapping("/accountLockedOpen")
	public void accountLockedOpen(@RequestParam(name = "userId") int userId) {
		authService.accountLockedOpen(userId);
	}

	@PostMapping("/refresh-token")
	@ResponseStatus(HttpStatus.OK)
	public RefreshTokenResponse refershToken(@RequestBody RefreshTokenRequest refreshTokenRequest) {
		System.out.println("Refresh Token");
		return this.authService.refershToken(refreshTokenRequest);
	}

	
	@PreAuthorize("hasRole('ADMIN')")
	@GetMapping("/getAllLockedAccounts")
	public List<GetAllLockedAccountsResponse> getAllLockedAccounts() {
		return this.authService.getAllLockedAccounts();
	}

}
